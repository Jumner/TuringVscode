import * as vscode from 'vscode';
import { helpSignature } from './sigHelpCompletions';

export const functionHelpProvider = vscode.languages.registerSignatureHelpProvider(
	't',
	{
		provideSignatureHelp(doc : vscode.TextDocument, pos : vscode.Position) {
			const signature = new vscode.SignatureHelp(); // Define signature (all of them)
			const line = doc.lineAt(pos).text.trim(); // Get current line
			const sigStorage = [ // Define function signatures
				helpSignature('The abs function is used to find the absolute value of a number', 'abs (expn : real) : real', '(Function)', ['expn'], ['Input positive or negative number'], 'Output positive number, absolute of `expn`'),
				helpSignature('The arccosd function is used to find the arc cosine of an angle given in degrees', 'arccosd (r : real) : real', '(Function)', ['r'], ['Input cosine ratio'], 'Output angle (degrees)'),
				helpSignature('The arccos function is used to find the arc cosine of a value. The result is given in radians', 'arccos (r : real) : real', '(Function)', ['r'], ['Input cosine ratio'], 'Output angle (radians)'),
				helpSignature('The arcsind function is used to find the arc sine of an angle given in degrees', 'arcsind (r : real) : real', '(Function)', ['r'], ['Input sine ratio'], 'Output angle (degrees)'),
				helpSignature('The arcsin function is used to find the arc sine of a value. The result is given in radians', 'arcsin (r : real) : real', '(Function)', ['r'], ['Input sine ratio'], 'Output angle (radians)'),
				helpSignature('The arctand function is used to find the arc tangent of an angle given in degrees', 'arctand (r : real) : real', '(Function)', ['r'], ['Input tangent ratio'], 'Output angle (degrees)'),
				helpSignature('The arctan function is used to find the arc tangent of a value. The result is given in radians', 'arctan (r : real) : real', '(Function)', ['r'], ['Input tangent ratio'], 'Output angle (radians)'),
				helpSignature('The buttonchoose procedure is used to change the mode of the mouse. In Turing, the mouse can either be in "single-button mode" or in "multi-button mode"', 'buttonchoose (choice : string)', '(Procedure)', ['choice'], ['Mode to put mouse into']),
				helpSignature('The buttonmoved function indicates whether there is a mouse event of the appropriate type on the mouse queue. Events are either "up", "down", "updown" or "downup" events', 'buttonmoved (motion : string) : boolean', '(Function)', ['motion'], ['Event to listen for'], 'If event has occurred'),
				helpSignature('The buttonwait procedure gets information about a mouse event and removes it from the queue', 'buttonwait (motion : string, var x, y, buttonnumber, buttonupdown : int)', '(Procedure)', ['motion', 'x', 'y', 'buttonnumber', 'buttonupdown'], ['Event to wait for', 'Variable is set to X position', 'Variable is set to Y position', 'Variable set to button id related to event', 'Variable set to event']),
				helpSignature('Returns the smallest integer greater than or equal to r', 'ceil (r : real) : int', '(Function)', ['r'], ['Input real number'], 'Output int that got rounded up'),
				helpSignature('The chr function is used to convert an integer to a character. The character is the i-th character of the ASCII sequence of characters', 'chr (i : int) : char', '(Function)', ['i'], ['Ascii character id'], 'Output character of Ascii id `i`'),
				helpSignature('The clock statement is used to determine the amount of time since a program (process) started running', 'clock (var c : int)', '(Procedure)', ['c'], ['Variable set to milliseconds since program started']),
				helpSignature('The cls (clear screen) procedure is used to blank the output window. The cursor is set to the top left (to row 1, column 1). This is exactly the same as the Draw.Cls method', 'cls', '(Procedure)'),
				helpSignature('The colorback procedure is used to change the color upon which text appears. The alternate spelling is cornerback', 'colourback (Colour : int)', '(Procedure)', ['Colour'], ['Colour id to set background to']),
				helpSignature('The color procedure is used to change the currently active color. This is the color of characters that are to be put on the screen. The alternate spelling is colour', 'colour (Colour : int)', '(Procedure)', ['Colour'], ['Colour id to set background to']),
				helpSignature('The cosd function is used to find the cosine of an angle given in degrees', 'cosd (r : real) : real', '(Function)', ['r'], ['Input angle (degrees)'], 'Output cosine ratio'),
				helpSignature('The cos function is used to find the cosine of an angle given in radians', 'cos (r : real) : real', '(Function)', ['r'], ['Input angle (radians)'], 'Output cosine ratio'),
				helpSignature('The date statement is used to determine the current date. Variable d is assigned a string in the format "dd mmm yy", where mmm is the first 3 characters of the month', 'date (var d : string)', '(Procedure)', ['d'], ['Input string set to today\' date']),
				helpSignature('The delay statement is used to cause the program to pause for a given time. The time duration is in milliseconds', 'delay (duration : int)', '(Procedure)', ['duration'], ['Time to delay program for (milliseconds)']),
				helpSignature('The drawarc procedure is used to draw an arc whose center is at (x, y). This is just like drawoval, except that you must also give two angles, initialAngle and finalAngle, which determine where to start and stop drawing. This is exactly the same as the Draw.Arc method', 'arc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'initialAngle', 'finalAngle', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Start angle of the arc. 0 degrees is East, 90 is North', 'End angle of the arc. 0 degrees is East, 90 is North', 'Arc colour']),
				helpSignature('The drawbox procedure is used to draw a box on the screen with bottom left and top right corners of (x1, y1) to (x2, y2) using the specified Color. This is exactly the same as the Draw.Box method', 'drawbox (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Box colour']),
				helpSignature('The drawdot procedure is used to color the dot (pixel) at location (x, y) using the specified Color. This is exactly the same as the Draw.Dot method', 'drawdot (x, y, Colour : int)', '(Procedure)', ['x', 'y', 'Colour'], ['X position of dot', 'Y position of dot', 'Colour of dot']),
				helpSignature('The drawfillarc procedure is used to draw a filled arc whose center is at (x, y). It then fills in the pie-shaped wedge using the specified Color. This is exactly the same as the Draw.FillArc method', 'drawfillarc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'initialAngle', 'finalAngle', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Start angle of the arc. 0 degrees is East, 90 is North', 'End angle of the arc. 0 degrees is East, 90 is North', 'Arc fill colour']),
				helpSignature('The drawfillbox procedure is used to draw a filled box on the screen with bottom left and top right corners of (x1, y1) to (x2, y2) filled using the specified Color. This is exactly the same as the Draw.FillBox method', 'drawfillbox (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Box fill colour']),
				helpSignature('The drawfill procedure is used to color in a figure that is on the screen. Starting at (x, y), the figure is filled with fillColor to a surrounding border whose color is borderColor. This is exactly the same as the Draw.Fill method', 'drawfill (x, y : int, fillColor, borderColor : int)', '(Procedure)', ['x', 'y', 'fillColour', 'borderColour'], ['X position of fill', 'Y position of fill', 'Colour to fill in', 'Colour of border']),
				helpSignature('The drawfillmapleleaf procedure is used to draw a filled maple leaf on the screen bounded by a rectangle with bottom left and top right corners of (x1, y1) to (x2, y2) and filled using the specified Color. This is exactly the same as the Draw.FillMapleLeaf method', 'drawfillmapleleaf (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Maple leaf fill colour']),
				helpSignature('The drawfilloval procedure is used to draw a filled oval whose center is at (x, y). The horizontal and vertical distances from the center to the oval are given by xRadius and yRadius. This is exactly the same as the Draw.FillOval method', 'drawfilloval (x, y, xRadius, yRadius, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Oval fill colour']),
				helpSignature('The drawfillpolygon procedure is used to draw a filled polygon with n points. The polygon is described by the points (x(1), y(1)) to (x(2), y(2)) to (x(3), y(3)) and so on to (x(n), y (n)). This is exactly the same as the Draw.FillPolygon method', 'drawfillpolygon (x, y : array 1 .. * of int, n : int, Color : int)', '(Procedure)', ['x', 'y', 'n', 'Colour'], ['Array of x positions of points on polygon', 'Array of y positions of points on polygon', 'Number of sides on the polygon', 'Polygon fill colour']),
				helpSignature('The drawfillstar procedure is used to draw a filled five pointed star on the screen bounded by a rectangle with bottom left and top right corners of (x1, y1) to (x2, y2) and filled using the specified Color. This is exactly the same as the Draw.FillStar method', 'drawfillstar (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Star fill colour']),
				helpSignature('The drawline procedure is used to draw a line on the screen from (x1, y1) to (x2, y2) using the specified Color. This is exactly the same as the Draw.Line method', 'drawline (x1, y1, x2, y2, Colour : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Line colour']),
				helpSignature('The drawmapleleaf procedure is used to draw a maple leaf on the screen bounded by a rectangle described by the bottom left and top right corners of (x1, y1) to (x2, y2) using the specified Color. This is exactly the same as the Draw.MapleLeaf method', 'drawmapleleaf (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Maple leaf colour']),
				helpSignature('The drawoval procedure is used to draw an oval whose center is at (x, y). The horizontal and vertical distances from the center to the oval are given by xRadius and yRadius. This is exactly the same as the Draw.Oval method', 'drawoval (x, y, xRadius, yRadius, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Oval colour']),
				helpSignature('The drawpolygon procedure is used to draw a polygon with n points. A line is drawn in Color from the point (x(1), y(1)) to (x(2), y(2)) to (x(3), y(3)) and so on. This is exactly the same as the Draw.Polygon method', 'drawpolygon (x, y : array 1 .. * of int, n : int, Color : int)', '(Procedure)', ['x', 'y', 'n', 'Colour'], ['Array of x positions of points on polygon', 'Array of y positions of points on polygon', 'Number of sides on the polygon', 'Polygon colour']),
				helpSignature('The drawstar procedure is used to draw a star on the screen bounded by a rectangle described by the bottom left and top right corners of (x1, y1) to (x2, y2) using the specified Color. This is exactly the same as the Draw.Star method', 'drawstar (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Star colour']),
				helpSignature('The empty function is used in a concurrent program. It returns true if the variableReference, which must be a condition variable, has no processes waiting for it. Processes join the queue of a condition variable by executing the wait statement, and are awakened by the signal statement', 'empty (variableReference) : boolean', '(Function)', ['variableReference'], ['Input variable to check'], 'If variable has a process waiting for it'),
				helpSignature('The eof (end of file) function is used to determine if there is any more input. It returns true when there are no more characters to be read', 'eof (streamNumber : int) : boolean', '(Function)', ['streamNumber'], ['Id of a file stream'], 'If all data has been read from stream'),
				helpSignature('The erealstr function is used to convert a real number to a string. erealstr always converts to scientific notation', 'erealstr (r : real, width, fractionWidth, exponentWidth : int) : string', '(Function)', ['r', 'width', 'fractionWidth', 'exponentWidth'], ['Input real number to convert', 'Min width of final result', 'Width of fraction', 'Min width of exponent'], ''),
				helpSignature('The exp function is used to find e to the power `r`, where e is the natural base and r is the parameter to exp. For example, exp (0) returns 1 and exp (1) returns the value of e', 'exp (r : real) : real', '(Function)', ['r'], ['Value to exponentiate'], 'Value of constant e to the power of `r`'),
				helpSignature('The fetcharg function is used to access the `i`-th argument that has been passed to a program from the command line', 'fetcharg ( i : int ) : string', '(Function)', ['i'], ['Which argument to access'], 'Output string of argument'),
				helpSignature('Returns the largest integer that is less than or equal to `r`', 'floor ( r : real ) : int', '(Function)', ['r'], ['Input real number to floor'], 'Output floor of `r`'),
				helpSignature('The frealstr function is used to convert a real number to a string. frealstr never converts to scientific notation', 'frealstr ( r : real, width, fractionWidth : int ) : string', '(Function)', ['r', 'width', 'fractionWidth'], ['real number to convert', 'Min width of output', 'Number of fraction digits'], 'Converted string of `r`'),
				helpSignature('The getch procedure is used to input a single character without waiting for the end of a line. The parameter ch is set to the next character in the keyboard buffer (the oldest not-yet-read character)', 'getch ( var ch : string ( 1 ) )', '(Procedure)', ['ch'], ['Variable set to next keyboard character']),
				helpSignature('The getchar function is used to input a single character without waiting for the end of a line. The next character in the keyboard buffer (the oldest not-yet-read character) is returned', 'getchar : char', '(Function)', [], [], 'next keyboard character'),
				helpSignature('The getenv function is used to access the environment string whose name is symbol. These strings are determined by the shell (command processor) or the program that caused your program to run. See also the nargs and fetcharg functions', 'getenv ( symbol : string ) : string', '(Function)', ['symbol'], ['Setting to get'], 'Resulting setting'),
				helpSignature('The getpid function is used to determine the I.D. (number) that identifies the current operating system task (process). Beware that there are processes, activated by the fork statement, that are independent of the operating systems tasks', 'getpid : int', '(Function)', [], [], 'Pid of program'),
				helpSignature('The getpriority function returns the priority of an executing process in a concurrent program. A smaller value means a faster speed', 'getpriority : nat', '(Function)', [], [], 'Gets priority of current process'),
				helpSignature('The hasch procedure is used to determine if there is a character that has been typed but not yet been read', 'hasch : boolean', '(Function)', [], [], 'If a char has been typed but not read'),
				helpSignature('The index function is used to find the position of patt within string s. For example, index ( "chair", "air" ) is 3', 'index (s , patt : string ) : int', '(Function)', ['s', 'patt'], ['String to search for `patt` in', 'substring to search for in `s`'], 'Index of the start of `patt` in `s`'),
				helpSignature('The intreal function is used to convert an integer to a real number. This function is rarely used, because in Turing, an integer value can be used where ever a real value is required. When the integer value is used where a real value is required, the intreal function is implicitly called to do the conversion from int to real', 'intreal ( i : int ) : real', '(Function)', ['i'], ['Integer input to be converted to real'], 'Output real number from `i`'),
				helpSignature('The intstr function is used to convert an integer to a string. The string is equivalent to i, padded on the left with blanks as necessary to a length of width, written in the given number base. For example, intstr (14, 4, 10)="bb14" where b represents a blank. The width and base parameters are both optional. If they are omitted, the string is made just long enough to hold the value, and the number base is 10', 'intstr ( i : int, width? : int, base? : int ) : string', '(Function)', ['i', 'width', 'base'], ['Integer to be converted', '_(Optional)_ Width of output string', '_(Optional)_ base of output'], 'Output string'),
				helpSignature('The length function returns the number of characters in the string. The string must be initialized. For example, length("table") is 5', 'length ( s : string ) : int', '(Function)', ['s'], ['Input string'], 'Length of input string `s`'),
				helpSignature('The ln function is used to find the natural logarithm (base e) of a number. For example, ln ( 1) is 0', 'ln ( r : real ) : real', '(Function)', ['r'], ['Input real number'], 'Natural logarithm of `r`'),
				helpSignature('The locate procedure is used to move the cursor so that the next output from put will be at the given row and column. Row 1 is the top of the screen and column 1 is the left side of the screen', 'locate ( row, column : int )', '(Procedure)', ['x', 'y'], ['X position to set curser to', 'Y position to set curser to']),
				helpSignature('The locatexy procedure is used to move the cursor so that the next output from put will be at approximately (x, y). The exact location may be somewhat to the left of x and below y to force alignment to a character boundary', 'locatexy ( x , y : int )', '(Procedure)', ['row', 'column'], ['Row to set curser to', 'Column to set curser to']),
				helpSignature('The lower attribute is used to find the lower bound of an array, string, char(n) or non-opaque subrange type. Since the lower bound is necessarily known at compile time, lower is rarely used', 'lower (reference, dimension? ) : int', '(Function)', ['reference', 'dimension'], ['Input reference array', '_(Optional)_ Dimension to check'], 'Lower bound of array'),
				helpSignature('The max function is used to find the maximum of two numbers (the two expn\'s). For example, max ( 5, 7 ) is 7. If both numbers are int, the result is int. If both numbers are nat (natural numbers), the result is nat. But if one or both of the numbers are real, the result is real', 'max ( expn , expn ) : expn', '(Function)', ['expn', 'expn'], ['Expression 1', 'Expression 2'], 'Larger of the two input expressions'),
				helpSignature('The min function is used to find the minimum of two numbers (the two expn\'s). For example, min ( 5, 7 ) is 5. If both numbers are int, the result is int. If both numbers are nat (natural numbers), the result is nat. But if one or both of the numbers are real, the result is real', 'min ( expn , expn ) : expn', '(Function)', ['expn', 'expn'], ['Expression 1', 'Expression 2'], 'Smaller of the two input expressions'),
				helpSignature('The natreal function is used to convert a natural number to a real number. This function is rarely used, because in Turing, a natural number can be used anyplace a real value is required. When this is done, the natreal function is implicitly called to do the conversion from nat to real. The natreal function is similar to intreal, except that natreal handles values that are larger than int values and does not handle negative values', 'natreal ( n : nat ) : real', '(Function)', ['n'], ['Input natural number'], 'Output real number from input `n`'),
				helpSignature('The natstr function is used to convert a natural number to a string. The string is equivalent to n, padded on the left with blanks as necessary to a length of width, written in the given number base. For example, natstr (14, 4, 10)="bb14" where b represents a blank', 'natstr ( n : nat, width? : int, base? : int ) : string', '(Function)', ['n', 'width', 'base'], ['Input natural number', '_(Optional)_ Min width of string', '_(Optional)_ Output base'], 'Converted string'),
				helpSignature('The ord function accepts an enumerated value, char, or a string of length 1, and returns the position of the value in the enumeration, or of the character in the ASCII (or EBCDIC for IBM mainframes) sequence. Values of an enumerated type are numbered left to right starting at zero. For example, ord ( "A" ) is 65. The ord function is the inverse of chr, so for any character c, chr ( ord (c)) = c', 'ord ( ch : char ) : int', '(Function)', ['ch'], ['Input character'], 'Ascii code for input `ch`'),
				helpSignature('The play procedure is used to sound musical notes on the computer', 'play ( music : string )', '(Procedure)', ['music'], ['String of notes to play']),
				helpSignature('The pred function accepts an integer, character, or an enumerated value and returns the integer minus one, the previous character, or the previous value in the enumeration. For example, pred ( 7 ) is 6', 'pred( expn ) : expn', '(Function)', ['expn'], ['Input enumerated value'], 'Output previous enumberated value'),
				helpSignature('The rand statement is used to create a pseudo-random number in the range zero to one. For example, if x is a real number, after rand(x), x would have a value such as 0.729548 or 0.352879', 'rand (var r : real)', '(Procedure)', ['r'], ['Variable set to random value between 0 and 1']),
				helpSignature('The randint statement is used to create a pseudo-random integer in the range low to high, inclusive. For example, if i is an integer, after randint(i,1, 10), i would have a value such as 7 or 2 or 10', 'randint ( var i : int, low, high : int )', '(Function)', ['i', 'low', 'high'], ['Variable set to random number between `low` and `high`', 'lower bound of output', 'higher bound of output'], ''),
				helpSignature('The randnext procedure is used when you need several sequences of pseudo-random numbers, and you need to be able to exactly repeat these sequences for a number of simulations. The Rand.Next procedure is the same as rand, except seq specifies one of ten independent and repeatable sequences of pseudo-random real numbers', 'randnext ( var v : real, seq : 1 .. 10 )', '(Procedure)', ['v', 'seq'], ['Variabled set to random number', 'Input sequence']),
				helpSignature('The randseed procedure restarts one of the sequences generated by Rand.Next. Each restart with the same seed causes Rand.Next to produce the same sequence for the given sequence', 'randseed ( seed : int, seq : 1 .. 10 )', '(Procedure)', ['seed', 'seq'], ['Seed to start sequence at', 'Input sequence']),
				helpSignature('The realstr function is used to convert a real number to a string. For example, realstr (2.5e1, 4)="bb25" where b represents a blank. The string is an approximation to r, padded on the left with blanks as necessary to a length of width', 'realstr ( r : real, width : int ) : string', '(Function)', ['r', 'width'], ['Input real number', 'Min width of output string'], 'Output string from `r`'),
				helpSignature('The repeat function returns i copies of string s catenated together. For example, repeat ("X", 4) is XXXX', 'repeat ( s : string, i : int ) : string', '(Function)', ['s', 'i'], ['String to be repeated', 'Number of times to repeat string `i`'], 'Output string'),
				helpSignature('The round function is used to convert a real number to an integer. The result is the nearest integer to r. In the case of a tie, the numerically larger value is returned. For example, round (3) is 3, round (2.85) is 3 and round (-8.43) is -8', 'round ( r : real ) : int', '(Function)', ['r'], ['Input real number'], 'Output rounded `r`'),
				helpSignature('The setpriority procedure is used to set the priority of a process in a concurrent program. This priority cannot be counted on to guarantee critical access to shared variables. A smaller value of p means increased speed. The argument to setpriority may be limited to the range 0 to 2**15 - 1', 'setpriority ( p : nat )', '(Procedure)', ['p'], ['Priority (0-2^14)']),
				helpSignature('The setscreen statement is used to change the mode of the screen, as well as the way in which Turing does input and output. The parameter to setscreen is a string, such as "graphics". The string contains one or more options separated by commas, such as "text, noecho"', 'setscreen ( s : string )', '(Procedure)', ['s'], ['Screen mode']),
				helpSignature('The sign function is used to determine whether a number is positive, zero or negative. It returns 1 if r > 0, 0 if r = 0, and -1 if r < 0. For example, sign (5) is 1 and sign (-23) is -1', 'sign ( r : real ) : -1 .. 1', '(Function)', ['r'], ['Input number'], 'Sign of input number `r`'),
				helpSignature('The sind function is used to find the sine of an angle given in degrees. For example, sind (0) is 0', 'sind ( r : real ) : real', '(Function)', ['r'], ['Input angle (degrees)'], 'Output trig ratio'),
				helpSignature('The sin function is used to find the sine of an angle given in radians. For example, sin (0) is 0', 'sin ( r : real ) : real', '(Function)', ['r'], ['Input angle (radians)'], 'Output trig ratio'),
				helpSignature('The sizeof attribute is used to find the number of bytes used to represent the type or variable. This is implementation-dependent (dirty)', 'sizeof (typeNameOrVariableReference) : nat', '(Function)', ['typeNameOrVariableReference'], ['Input variable to find size of'], 'Bytes that `typeNameOrVariableReference` takes up'),
				helpSignature('The sound procedure is used to cause the computer to sound a note of a given frequency for a given time. The frequency is in cycles per second (Hertz). The time duration is in milliseconds. For example, middle A on a piano is 440 Hertz, so sound(440, 1000) plays middle A for one second', 'sound ( frequency, duration : int )', '(Procedure)', ['frequency', 'duration'], ['Frequency of sound to play', 'Duration to play frequency']),
				helpSignature('The sqrt function is used to find the square root of a number. For example, sqrt (4) is 2', 'sqrt ( r : real ) : real', '(Function)', ['r'], ['Input real number'], 'Square root of `r`'),
				helpSignature('The strint function is used to convert a string to an integer. The integer is equivalent to string s. The number base parameter is optional, for example, strint ("47") = 47. In Turing proper, the base is not allowed and is assumed to be 10', 'strint ( s : string, base? : int ) : int', '(Function)', ['s', 'base'], ['Input string', '_(Optional)_ Base of input string `s`'], 'Output integer from string `s`'),
				helpSignature('The strintok function is used determine whether the strint function can be used to convert the string to an integer without causing an error. If the string can be successfully converted, then strintok returns true, otherwise it returns false', 'strintok ( s : string, base? : int ) : boolean', '(Function)', ['s', 'base'], ['Input string', '_(Optional)_ Base of input string `s`'], 'If string `s` base `base` can be represented as an integer'),
				helpSignature('The strnat function is used to convert a string to a natural number. The natural number is equivalent to string s. The number base parameter is optional, for example, strnat("47") = 47', 'strnat ( s : string, base? : int ) : nat', '(Function)', ['s', 'base'], ['Input string', '_(Optional)_ Base of input string `s`'], 'Output natural number from string `s`'),
				helpSignature('The strnatok function is used determine whether the strnat function can be used to convert the string to a natural number without causing an error. If the string can be successfully converted, then strnatok returns true, otherwise it returns false', 'strnatok ( s : string, base? : int ) : boolean', '(Function)', ['s', 'base'], ['Input string', '_(Optional)_ Base of input string `s`'], 'If string `s` base `base` can be represented as a natural number'),
				helpSignature('The strreal function is used to convert a string to a real number. For example, strreal ("2.5e1") will produce an approximation to the number 25.0', 'strreal ( s : string ) : real', '(Function)', ['s'], ['Input string to convert'], 'Output real number from string `s`'),
				helpSignature('The strrealok function is used determine whether the strreal function can be used to convert the string to a real number without causing an error. If the string can be successfully converted, then strrealok returns true, otherwise it returns false', 'strrealok ( s : string ) : boolean', '(Function)', ['s'], ['Input string to convert'], 'If string `s` can be represented as a real number'),
				helpSignature('The succ function accepts an integer, character or an enumerated value and returns the integer plus one, the next character, or the next value in the enumeration. For example, succ (7) is 8.', 'succ ( expn ) : expn', '(Function)', ['expn'], ['Input enumerated value'], 'Output previous enumberated value'),
				helpSignature('The sysclock statement is used on a multitasking system such as UNIX to determine the amount of time that has been used by this program (process). Variable c is assigned the number of central processor milliseconds assigned to this program. This is of little use on a personal computer, where sysclock returns the same value as clock', 'sysclock ( var c : int )', '(Procedure)', ['c'], ['Variable `c` set to ms of cpu time used']),
				helpSignature('The system statement is used to execute the shell (operating system) command, as if it were typed at the terminal. The return code is in ret. A return code of 0 (zero) means no detected errors. A return code of 127 means the command processor could not be accessed. A return code of 126 means the command processor did not have room to run on the PC', 'system ( command : string, var ret : int )', '(Procedure)', ['command', 'ret'], ['Command to be executed', 'Variable set to return code']),
				helpSignature('The tand function is used to find the tangent of an angle given in degrees. For example, tand (45) is 1', 'tand ( r : real ) : real', '(Function)', ['r'], ['Input angle (degrees)'], 'Output trig ratio'),
				helpSignature('The tan function is used to find the tangent of an angle given in radians. For example, tan (p/4) is 0.5', 'tan ( r : real ) : real', '(Function)', ['r'], ['Input angle (degrees)'], 'Output trig ratio'),
				helpSignature('The time statement is used to determine the current time of day. Variable t is assigned a string in the format "hh:mm:ss". For example, if the time is two minutes and 47 seconds after nine A.M., t will be set to "09:02:47". Twenty-four hour time is used. For example, eleven thirty P.M. gives the string "23:30:00"', 'time ( var t : string )', '(Procedure)', ['t'], ['Variable `t` set to current time']),
				helpSignature('The upper attribute is used to find the upper bound of an array, string, char(n) or non-opaque subrange type', 'upper ( reference, dimension? ) : int', '(Function)', ['reference', 'dimension'], ['Input reference array', '_(Optional)_ Dimension to check'], 'Upper bound of array'),
				helpSignature('The wallclock statement is used to determine the time in seconds since 00:00:00 GMT (Greenwich Mean Time) January 1, 1970', 'wallclock ( var c : int )', '(Procedure)', ['c'], ['Variable set to seconds since Jan 1, 1970']),
				helpSignature('The whatdotcolour function is used to determine the colour number of the specified pixel', 'whatdotcolor ( x, y : int ) : int', '(Function)', ['x', 'y'], ['X position to check', 'Y position to check'], 'Colour id at position `x`, `y`')
			];
			sigStorage.push( // Define module method signatures
				helpSignature('Config.Display returns information about the display (or displays) attached to the computer. The parameter displayCode determines what sort of information is passed back', 'Config.Display (displayCode : int) : int', '(Function)', ['displayCode'], ['Info to return. Either: cdScreenHeight, cdScreenWidth, cdMaxNumColors, or cdMaxNumColours'], 'Information about the display'),
				helpSignature('Config.Lang returns information about the language and the limitations of the implementation that the program is currently running. The parameter langCode determines what sort of information is passed back', 'Config.Lang (langCode : int) : int', '(Function)', ['langCode'], ['Info to return. Either: clRelease, clLanguageVersion, clMaxNumStreams, clMaxNumDirStreams, clMaxNumRunTimeArgs'], 'Information about the Turing'),
				helpSignature('Config.Machine returns information about the machine that the program is currently running on. The parameter machineCode determines what sort of information is passed back', 'Config.Machine (machineCode : int) : int', '(Function)', ['machineCode'], ['Info to return. Either: cmProcessor, cmFPU, or cmOS'], 'Information on the current machine'),
				helpSignature('Dir.Change changes the execution directory to that specified by the parameter directoryPathName. This is the equivalent of doing a cd in UNIX', 'Dir.Change (directoryPathName : string)', '(Procedure)', ['directoryPathName'], ['Path to directory to change into']),
				helpSignature('Dir.Close is part of a series of four subprograms that help users get directory listings. Dir.Close is used to close a directory stream number opened by Dir.Open. After the directory stream number is closed, it can not be used with Dir.Get or Dir.GetLong', 'Dir.Close (streamNumber : int)', '(Procedure)', ['streamNumber'], ['File stream id']),
				helpSignature('Dir.Create is used to create the directory specified by the parameter directoryPathName. This is the equivalent of doing a mkdir in DOS or UNIX', 'Dir.Create (directoryPathName : string)', '(Procedure)', ['directoryPathName'], ['Path to directory to change into']),
				helpSignature('Dir.Delete is used to delete the directory specified by the parameter directoryPathName. This is the equivalent of doing a rmdir in DOS or UNIX. Dir.Delete will fail if it attempts delete a directory that has files in it', 'Dir.Delete (directoryPathName : string)', '(Procedure)', ['directoryPathName'], ['Path to directory to change into']),
				helpSignature('Dir.Exists returns true if a directory by the name of directoryPathName exists. It will return false if directoryPathName is a file', 'Dir.Exists (directoryPathName : string) : boolean', '(Function)', ['directoryPathName'], ['Path to directory to change into'], 'If path exists'),
				helpSignature('Dir.Get is part of a series of four subprograms that help users get directory listings. Dir.Get is used to get the file names in the directory. Each time the function is called, it returns the next file name in the directory', 'Dir.Get (streamNumber : int) : string', '(Function)', ['streamNumber'], ['File stream id'], 'A file in the current streamNumber directory'),
				helpSignature('Dir.GetLong is part of a series of four subprograms that help users get directory listings. Dir.GetLong is used to get the names and assorted information of the files in the directory. Each time the function is called, it returns the name and information of the next file in the directory', 'Dir.GetLong (streamNumber : int, entryName : string, size, attribute, fileTime : int)', '(Procedure)', ['streamNumber', 'entryName', 'size', 'attribute', 'fileTime'], ['File stream id', 'Name of file', 'Size of file', 'File attributes', 'Last file modification']),
				helpSignature('Dir.Open is part of a series of four subprograms that help users get directory listings. Dir.Open returns a directory stream number if the directory could be opened', 'Dir.Open (directoryPathName : string) : int', '(Function)', ['directoryPathName'], ['Path to directory to change into'], 'Stream number id'),
				helpSignature('The Draw.Cls (clear screen) procedure is used to blank the output window. The cursor is set to the top left (to row 1, column 1)', 'Draw.Cls', '(Procedure)'),
				helpSignature('The Draw.Dot procedure is used to color the dot (pixel) at location (x, y) using the specified Color', 'Draw.Dot (x, y, Colour : int)', '(Procedure)', ['x', 'y', 'Colour'], ['X position of dot', 'Y position of dot', 'Colour of dot']),
				helpSignature('The Draw.Line procedure is used to draw a line on the screen from (x1, y1) to (x2, y2) using the specified Colour', 'Draw.Line (x1, y1, x2, y2, Colour : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Line colour']),
				helpSignature('The Draw.DashedLine procedure is used to draw a dotted or dashed line on the screen from (x1, y1) to (x2, y2) using the specified Color', 'Draw.DashedLine (x1, y1, x2, y2, lineStyle, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'lineStyle', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'drawSolid Draws a solid line (same as Draw.Line) drawDash Draws a dashed line drawDot Draws a dotted line drawDashDot Draws a line that alternates dashes and dots drawDashDotDot Draws a line that alternates dash and dot-dot', 'Line colour']),
				helpSignature('The Draw.ThickLine procedure is used to draw a line on the screen from (x1, y1) to (x2, y2) using the specified Color', 'Draw.ThickLine (x1, y1, x2, y2, lineWidth, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'lineWidth', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Width (in pixels) of line', 'Line colour']),
				helpSignature('The Draw.Box procedure is used to draw a box on the screen with bottom left and top right corners of (x1, y1) to (x2, y2) using the specified Color', 'Draw.Box (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Box colour']),
				helpSignature('The Draw.FillBox procedure is used to draw a filled box on the screen with bottom left and top right corners of (x1, y1) to (x2, y2) filled using the specified Color', 'Draw.FillBox (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Start X position', 'Start Y position', 'End X position', 'End Y position', 'Box fill colour']),
				helpSignature('The Draw.Oval procedure is used to draw an oval whose center is at (x, y). The horizontal and vertical distances from the center to the oval are given by xRadius and yRadius', 'Draw.Oval (x, y, xRadius, yRadius, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Oval colour']),
				helpSignature('The Draw.FillOval procedure is used to draw a filled oval whose center is at (x, y). The horizontal and vertical distances from the center to the oval are given by xRadius and yRadius', 'Draw.FillOval (x, y, xRadius, yRadius, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Oval fill colour']),
				helpSignature('The Draw.Arc procedure is used to draw an arc whose center is at (x, y). This is just like drawoval, except that you must also give two angles, initialAngle and finalAngle, which determine where to start and stop drawing', 'Draw.Arc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'initialAngle', 'finalAngle', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Start angle of the arc. 0 degrees is East, 90 is North', 'End angle of the arc. 0 degrees is East, 90 is North', 'Arc colour']),
				helpSignature('The Draw.FillArc procedure is used to draw a filled arc whose center is at (x, y). It then fills in the pie-shaped wedge using the specified Color', 'Draw.FillArc (x, y, xRadius, yRadius : int, initialAngle, finalAngle, Color : int)', '(Procedure)', ['x', 'y', 'xRadius', 'yRadius', 'initialAngle', 'finalAngle', 'Colour'], ['Center X position', 'Center Y position', 'Radius along x axis', 'Radius along y axis', 'Start angle of the arc. 0 degrees is East, 90 is North', 'End angle of the arc. 0 degrees is East, 90 is North', 'Arc fill colour']),
				helpSignature('The Draw.Polygon procedure is used to draw a polygon with n points. A line is drawn in Color from the point (x(1), y(1)) to (x(2), y(2)) to (x(3), y(3)) and so on', 'Draw.Polygon (x, y : array 1 .. * of int, n : int, Color : int)', '(Procedure)', ['x', 'y', 'n', 'Colour'], ['Array of x positions of points on polygon', 'Array of y positions of points on polygon', 'Number of sides on the polygon', 'Polygon colour']),
				helpSignature('The Draw.FillPolygon procedure is used to draw a filled polygon with n points. The polygon is described by the points (x(1), y(1)) to (x(2), y(2)) to (x(3), y(3)) and so on to (x(n), y (n))', 'Draw.FillPolygon (x, y : array 1 .. * of int, n : int, Color : int)', '(Procedure)', ['x', 'y', 'n', 'Colour'], ['Array of x positions of points on polygon', 'Array of y positions of points on polygon', 'Number of sides on the polygon', 'Polygon fill colour']),
				helpSignature('The Draw.MapleLeaf procedure is used to draw a maple leaf on the screen bounded by a rectangle described by the bottom left and top right corners of (x1, y1) to (x2, y2) using the specified Color', 'Draw.MapleLeaf (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Maple leaf colour']),
				helpSignature('The Draw.FillMapleLeaf procedure is used to draw a filled maple leaf on the screen bounded by a rectangle with bottom left and top right corners of (x1, y1) to (x2, y2) and filled using the specified Color', 'Draw.FillMapleLeaf (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Maple leaf fill colour']),
				helpSignature('The Draw.Star procedure is used to draw a star on the screen bounded by a rectangle described by the bottom left and top right corners of (x1, y1) to (x2, y2) using the specified Color', 'Draw.Star (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Star colour']),
				helpSignature('The Draw.FillStar procedure is used to draw a filled five pointed star on the screen bounded by a rectangle with bottom left and top right corners of (x1, y1) to (x2, y2) and filled using the specified Color', 'Draw.FillStar (x1, y1, x2, y2, Color : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2', 'Colour'], ['Bottom left corner X position', 'Bottom left corner Y position', 'Top right corner X position', 'Top right corner Y position', 'Star fill colour']),
				helpSignature('The Draw.Fill procedure is used to color in a figure that is on the screen. Starting at (x, y), the figure is filled with fillColor to a surrounding border whose color is borderColor', 'Draw.Fill (x, y : int, fillColor, borderColor : int)', '(Procedure)', ['x', 'y', 'fillColour', 'borderColour'], ['X position of fill', 'Y position of fill', 'Colour to fill in', 'Colour of border']),
				helpSignature('Draw.Text is used to actually draw text in a specified font. The textStr parameter contains the string to be drawn. The x and y parameters are the location of the lower left hand corner of the text to be displayed', 'Draw.Text (txtStr : string, x, y, fontID, Color : int)', '(Procedure)', ['textStr', 'x', 'y', 'fontID', 'Colour'], ['Text to display', 'Lower left corner X position', 'Lower left corner Y position', 'Text font', 'Text colour']),
				helpSignature('Error.Msg is a function that returns the error message related to a specified error code. If the error code is eNoError, or if there is no such error code, it returns the empty string. If there is such an error, it returns the textual message associated with that error', 'Error.Msg (errorCode : int): string', '(Function)', ['errorCode'], ['Error code'], 'Error message'),
				helpSignature('Error.Str is a function that returns the error message related to a specified error code. If the error code is eNoError or if there is no such error code, it returns the empty string. If there is such an error, it returns the textual message associated with that error', ' 	Error.Str (errorCode : int): string', '(Function)', ['errorCode'], ['Error code'], 'Error string'),
				helpSignature('Error.Trip is a procedure that sets the error number that is returned by Error.Last and Error.LastMsg. It does not halt the program', 'Error.Trip (errorCode : int)', '(Procedure)', ['errorCode'], ['Error code']),
				helpSignature('Error.TripMsg is a procedure that sets the error number and error message that is returned by Error.Last and Error.LastMsg. It does not halt the program', 'Error.TripMsg (errorCode : int, errorMessage : string)', '(Procedure)', ['errorCode', 'errorMessage'], ['Error Code','Error code message']),
				helpSignature('Error.Halt is a procedure that immediately halts execution of the program and shows the specified error message on the line in the program that calls Error.Halt', 'Error.Halt (errorMessage : string)', '(Procedure)', ['errorMessage'], ['Error code message']),
				helpSignature('File.Exists returns true if a file by the name of pathName exists. It will return false if pathName is a directory', 'File.Exists (pathName : string) : boolean', '(Function)', ['pathName'], ['Path to file'], 'If file at pathName exists'),
				helpSignature('File.FullPath returns a string representing the full absolute path name in Turing format (forward slashes) of the path that is passed to the function. The path name passed in does not have to describe an existing file or directory', 'File.FullPath (pathName) : string) : string', '(Function)', ['pathName'], ['Path to file'], 'Absolute path to file'),
				helpSignature('File.Parent returns a string representing the parent directory in Turing format (forward slashes) of the path passed as a parameter. The path name passed in does not have to describe an existing file or directory', 'File.Parent (pathName : string) : string', '(Function)', ['pathName'], ['Path to file'], 'Path to parent directory'),
				helpSignature('File.Status is used to get assorted information about a file or directory. When the function is called with a specified pathName, it returns the information about the file in the other parameters', 'File.Status (pathName : string, var size, attribute, fileTime : int)', '(Procedure)', ['pathName', 'size', 'attribute', 'fileTime'], ['Path to file', 'Variable parameter is set to size of file', 'Variable parameter is set to attributes of file', 'Time since last modification']),
				helpSignature('File.Copy copies a file named by the srcPathName parameter to the file named by the destPathName parameter. The copy can be between different disks or file systems', 'File.Copy (srcPathName, destPathName : string)', '(Procedure)', ['srcPathName', 'destPathName'], ['Path to source file', 'Path to destination file']),
				helpSignature('File.Copy renames a file or directory named by the srcPathName parameter to the destName parameter. The destName parameter must be a name only', 'File.Rename (srcPathName, destName : string)', '(Procedure)', ['srcPathName', 'destPathName'], ['Path to source file', 'Path to renamed file']),
				helpSignature('File.Delete is used to delete the file specified by the parameter filePathName. This is the equivalent of doing a del in DOS or rm in UNIX', 'File.Delete (filePathName : string)', '(Procedure)', ['filePathName'], ['Path to file to delete']),
				helpSignature('File.DiskFree gets the number of bytes for the disk upon which pathName resides. The pathName parameter can specify either a file or a directory. If it is the empty string, then File.DiskFree returns the number of bytes of free disk space on the disk upon which the execution directory resides', 'File.DiskFree (pathName : string) : int', '(Function)', ['pathName'], ['Path to file'], 'Bytes of free space (2gb max)'),
				helpSignature('The Input.Pause procedure simply waits for a key to be pressed and then returns. It echoes the key pressed if echo mode is set. (See View.Set for setting echo mode)', 'Input.Pause', '(Procedure)'),
				helpSignature('The Input.Keydown procedure allows a program to read which keys are currently being pressed. This procedure is different from getch in that it allows a program to detect when a user presses and releases a button. As such, it is not to be used in conjunction with getch', 'Input.KeyDown (var chars : array char of boolean)', '(Procedure)', ['chars'], ['Variable chars of type array char of boolean']),
				helpSignature('The Input.Flush procedure empties the keyboard buffer. It is often used to avoid accidentally reading multiple keystrokes because the user pressed a key for too long, causing autorepeat', 'Input.Flush', '(Procedure)'),
				helpSignature('Math.Distance is used to calculate the distance between two points. (x1, y1) is the location of the first point, and (x2, y2) is the location of the second point', 'Math.Distance (x1, y1, x2, y2 : real) : real', '(Function)', ['x1', 'y1', 'x2', 'y2'], ['Point 1 X position', 'Point 1 Y position', 'Point 2 X position', 'Point 2 Y position'], 'Distance between input points'),
				helpSignature('Math.DistancePointLine is used to calculate the distance between a point and a line segment. It is often used in games to determine if a collision has occurred. (xp, yp) is the location between the point. (x1, y1) and (x2, y2) are the end points of the line segment', 'Math.DistancePointLine (xp, yp, x1, y1, x2, y2 : real) : real', '(Function)', ['xp', 'yp', 'x1', 'y1', 'x2', 'y2'], ['Point X position', 'Point Y position', 'Line point 1 X position', 'Line point 1 Y position', 'Line point 2 X position', 'Line point 2 Y position'], 'Min distance between input point and input line'),
				helpSignature('The Mouse.Where procedure is used to get current information about the status of the mouse. The parameters x and y are set to the current location of the mouse cursor. If the program is running on a system using windows, the cursor may be outside the window. This means that x and y may be set to values outside of the bounds of 0 to maxx and 0 to maxy', 'Mouse.Where (var x, y, button : int)', '(Procedure)', ['x', 'y', 'button'], ['Input variable set to mouse X position', 'Input variable set to mouse Y position', 'Input variable set to mouse button']),
				helpSignature('The Mouse.ButtonMoved function indicates whether there is a mouse event of the appropriate type on the mouse queue. Events are either "up", "down", "updown" or "downup" events (although the "downup" and "updown" are the same event)', 'Mouse.ButtonMoved (motion : string) : boolean', '(Function)', ['motion'], ['Mouse event to ask for'], 'If mouse event occurred'),
				helpSignature('The Mouse.ButtonWait procedure gets information about a mouse event and removes it from the queue', 'Mouse.ButtonWait (motion : string, var x, y, buttonNumber, buttonUpDown : int)', '(Procedure)', ['motion', 'x', 'y', 'buttonNumber', 'buttonUpDown'], ['Mouse event', 'Variable', 'Input variable set to mouse X position', 'Input variable set to mouse Y position', 'Input variable set to mouse number', 'Input variable set to button event']),
				helpSignature('The Mouse.ButtonChoose procedure is used to change the mode of the mouse. In Turing, the mouse can either be in "single-button mode" or in "multi-button mode". In "single-button mode" the mouse is treated as a one button mouse. A button is considered pressed when any button is pressed and released only when all buttons have been released', 'Mouse.ButtonChoose (choice : string)', '(Procedure)', ['choice'], ['Mode to set mouse to']),
				helpSignature('The Music.PlayFileStop procedure is used to to stop all music files currently playing. This includes processes that are executing the Music.PlayFile procedure (they exit immediately and start executing the next statement in the process), and the Music.PlayFileReturn and Music.PlayFileLoop statements, which simply stop playing the music', 'Music.PlayFileStop', '(Procedure)'),
				helpSignature('The Music.PlayFileLoop procedure is used to play a file of music continuously, looping until the program is halted or the Music.PlayFileStop command is given. The file must be in one of the acceptable formats and the machine, must have the appropriate hardware', 'Music.PlayFileLoop ( fileName : string )', '(Procedure)', ['fileName'], ['Name of music file to play']),
				helpSignature('The Music.PlayFileReturn procedure is used to play a file of music. The file must be in one of the acceptable formats and the machine, must have the appropriate hardware', 'Music.PlayFileReturn ( fileName : string )', '(Procedure)', ['fileName'], ['Name of music file to play']),
				helpSignature('The Music.PlayFile procedure is used to play a file of music. The file must be in one of the acceptable formats and the machine, must have the appropriate hardware', 'Music.PlayFile ( fileName : string )', '(Procedure)', ['fileName'], ['Name of music file to play']),
				helpSignature('The Music.Play procedure is used to sound musical notes on the computer', 'Music.Play ( music : string )', '(Procedure)', ['music'], ['String of notes to play']),
				helpSignature('The Music.SoundOff procedure stops any sound or music that is currently playing or is waiting to play', 'Music.SoundOff', '(Procedure)'),
				helpSignature('The Music.Sound statement is used to cause the computer to sound a note of a given frequency for a given time. The frequency is in cycles per second (Hertz). The time duration is in milliseconds. For example, middle A on a piano is 440 Hertz, so Music.Sound(440, 1000) plays middle A for one second', 'Music.Sound ( frequency, duration : int )', '(Procedure)', ['frequency', 'duration'], ['Frequency of sound to play', 'Duration to play frequency']),
				helpSignature('Listens for a connection at the port specified by the port parameter. When another program connects to the port, then the function returns. The address of the connecting machine is specified in the netAddr parameter and the Net.WaitForConnection returns a network stream descriptor which can be used with the put, get, read, and write statements and eof function to send and receive data to the connecting program. It is also the parameter used for the Net.CloseConnection, Net.BytesAvailable, Net.CharAvailable, Net.LineAvailable, and Net.TokenAvailable functions', 'Net.WaitForConnection (port : int, var netAddr : string) : int', '(Function)', ['port', 'netAddr'], ['Port to listen on', 'Variable set to the address of connecting device'], 'Stream id to listen to data'),
				helpSignature('Attempts to open a connection to port specified by the port parameter on the machine specified by netAddr parameter. There must be a program listening to that port for the connection to be made. In OOT, this is done using the Net.WaitForConnection function', 'Net.OpenConnection (netAddr : string, port : int) : int', '(Function)', ['netAddr', 'port'], ['Address to computer to send information to', 'Port to send information to'], 'Stream id to send data to'),
				helpSignature('Attempts to open a http connection to pthe URL (Universal Resource Locator) specified by the urlAddr', 'Net.OpenURLConnection (urlAddr : string) : int', '(Function)', ['urlAddr'], ['Url to open a connection to'], 'Stream id to send data to'),
				helpSignature('Closes a network connection made with Net.OpenConnection or Net.WaitForConnection. After the connection is closed, the net stream cannot be used for any purpose on either side of the connection', 'Net.CloseConnection (netStream : int)', '(Procedure)', ['netStream'], ['Id of net stream returned when connection was opened']),
				helpSignature('Returns the number of bytes available for reading from the net stream specified by the netStream parameter', 'Net.BytesAvailable (netStream : int) : int', '(Function)', ['netStream'], ['Id of net stream returned when connection was opened'], 'Number of bytes of stream left to read'),
				helpSignature('Returns true if a character is waiting to be read from the net stream specified by the netStream parameter. If Net.CharAvailable returns true, then a single character can be read from the stream without blocking', 'Net.CharAvailable (netStream : int) : boolean', '(Function)', ['netStream'], ['Id of net stream returned when connection was opened'], 'If a char is able to be read from stream'),
				helpSignature('Returns true if a line of input is waiting to be read from the net stream specified by the netStream parameter. If Net.LineAvailable returns true, then a line of input can be read from the stream without blocking', 'Net.LineAvailable (netStream : int) : boolean', '(Function)', ['netStream'], ['Id of net stream returned when connection was opened'], 'If a line is able to be read from stream'),
				helpSignature('Returns true if a line of input is waiting to be read from the net stream specified by the netStream parameter. If Net.TokenAvailable returns true, then a single token (character surrounded by whitespace) can be read from the stream without blocking', 'Net.TokenAvailable (netStream : int) : boolean', '(Function)', ['netStream'], ['Id of net stream returned when connection was opened'], 'If a token is able to be read from stream'),
				helpSignature('Returns the numeric TCP/IP address of the machine whose hostname is specified by the hostName parameter', 'Net.HostAddressFromName (hostName : string) : string', '(Function)', ['hostName'], ['Hostname of a machine'], 'Tcp/Ip address of hostname'),
				helpSignature('Returns the TCP/IP hostname of the machine whose numeric address is specified by the hostAddr parameter', 'Net.HostNameFromAddress (hostAddr : string) : string', '(Function)', ['hostAddr'], ['Tcp/Ip address of a machine'], 'Hostname of Tcp/Ip address'),
				helpSignature('The PC.ParallelGet procedure is used on a PC to read the value of certain pins on the parallel port. This port corresponds to the MS-DOS device "LPT1". This procedure can be used to control robots and peripherals', 'PC.ParallelGet (port : int) : nat1', '(Function)', ['port'], ['Parallel port to receive data from'], 'Decimal of byte representing which pins are high. If high is = 1 and low = 0, Then number `88` represents `1011000` means Pin 11 is high, Pin 10 is low, Pin 12 is gigh, Pin 13 is high, Pin 15 is low'),
				helpSignature('The PC.ParallelPut procedure is used on a PC to set the values on the data pins on the parallel port. This port corresponds to the MS-DOS device "LPT1". This procedure can be used to control robots and peripherals', 'PC.ParallelPut (port : int, value : int)', '(Function)', ['port', 'value'], ['Parallel port to send data do', 'Byte where each pin represents each place in the binary representation of the byte']),
				helpSignature('The Rand.Real function returns a pseudo-random number in the range zero to one. For example, if x is a real number, after x := Rand.Real, x would have a value such as 0.729548 or 0.352879', 'Rand.Real : real', '(Function)', [], [], 'A random number of type `real`'),
				helpSignature('The Rand.Int statement is used to create a pseudo-random integer in the range low to high, inclusive. For example, if i is an integer, after randint(i,1, 10), i would have a value such as 7 or 2 or 10', 'Rand.Int (low, high : int) : int', '(Function)', ['low', 'high'], ['Lower bound of possible numbers', 'Upper bound of possible numbers'], 'A random number of type `int` between `low` and `high`'),
				helpSignature('This is a procedure with no parameters that resets the sequences of pseudo-random numbers produced by Rand.Real and Rand.Int. This allows identical executions of the same program to produce identical results', 'Rand.Reset', '(Procedure)'),
				helpSignature('This procedure sets the seed for sequences of pseudo-random numbers produced by Rand.Real and Rand.Int. This allows identical executions of the same program to produce identical results', 'Rand.Set (seed : nat4)', '(Procedure)', ['seed'], ['Seed to set random to']),
				helpSignature('The Rand.Next procedure is used when you need several sequences of pseudo-random numbers, and you need to be able to exactly repeat these sequences for a number of simulations. The Rand.Next procedure is the same as rand, except seq specifies one of ten independent and repeatable sequences of pseudo-random real numbers', 'Rand.Next (seq : 1 .. 10) : real', '(Function)', ['seq'], ['Input sequence'], 'Output number of type real'),
				helpSignature('The Rand.Seed procedure restarts one of the sequences generated by Rand.Next. Each restart with the same seed causes Rand.Next to produce the same sequence for the given sequence', 'Rand.Seed (seed : nat4, seq : 1 .. 10)', '(Procedure)', ['seed', 'seq'], ['Seed to start sequence at', 'Input sequence']),
				helpSignature('The RGB.GetColour procedure returns the red, green and blue components to the color associated with the colorNumber parameter. The red, green and blue values are normalized to be between 0 and 1. Thus color white returns 1.0 for the redComp, greenComp and blueComp values and colour black returns 0.0 for all three', 'RGB.GetColour(colourNumber : int, var redComp, greenComp, blueComp : real)', '(Procedure)', ['colourNumber', 'redComp', 'greenComp', 'blueComp'], ['Colour id to get', 'Variable to set red value to', 'Variable to set green value to', 'Variable to set blue value to']),
				helpSignature('The RGB.SetColour function sets the red, green and blue components of the color associated with the colourNumber parameter. The red, green and blue values must normalized to be between 0 and 1', 'RGB.SetColour(colourNumber : int, redComp, greenComp, blueComp : real)', '(Procedure)', ['colourNumber', 'redComp', 'greenComp', 'blueComp'], ['Colour id to set', 'Red value (0-1)', 'Green value (0-1)', 'Blue value (0-1)']),
				helpSignature('The RGB.AddColour function attempts to create a new colour with the red, green and blue components specified. If successful, the function returns a new color number (usually one greater than maxcolor) and maxcolor is updated by adding 1 to it. If it is unsuccessful, the function returns 1 and Error.Last and Error.LastMsg can be used to determine the cause of the problem', 'RGB.AddColour(redComp, blueComp, greenComp)', '(Function)', ['redComp', 'blueComp', 'greenComp'], ['Colour id to set', 'Red value (0-1)', 'Green value (0-1)', 'Blue value (0-1)'], 'Id of newly created colour'),
				helpSignature('The Stream.Flush procedure is used to flush any buffered output associated with the streamNumber parameter', 'Stream.Flush ( streamNumber : int )', '(Procedure)', ['streamNumber'], ['Id of stream to flush']),
				helpSignature('The Stream.FlushAll procedure is used to flush any buffered output in any open file', 'Stream.FlushAll', '(Procedure)'),
				helpSignature('The Str.Lower function takes the string s and returns a string in which all the upper case letters are converted to lower case. For example, Str.Lower ("ABC123def") returns "abc123def"', 'Str.Lower (s : string) : string', '(Function)', ['s'], ['Input string to put into lowercase'], 'Lowercase output string'),
				helpSignature('The Str.Upper function takes the string s and returns a string in which all the lower case letters are converted to upper case. For example, Str.Upper ("ABC123def") returns "ABC123DEF"', 'Str.Upper (s : string) : string', '(Function)', ['s'], ['Input string to put into uppercase'], 'Uppercase output string'),
				helpSignature('The Str.Trim function takes the string str and returns a string in all the leading and trailing spaces (the spaces at the beginning and the end) are deleted. For example, Str.Trim (" This is a test ") returns "This is a test". If str only has spaces in it, then Str.Trim will return an empty string', 'Str.Trim (str : string) : string', '(Function)', ['str'], ['Input string to trim'], 'Output trimmed string'),
				helpSignature('The Sys.GetComputerName function is used to determine the name of the computer. On the PC, this is the NetBIOS name. It returns “No Name” if a name could not be determined', ' 	Sys.GetComputerName : string', '(Function)', [], [], 'Computer name'),
				helpSignature('The Sys.GetEnv function is used to access the environment string whose name is symbol. These strings are determined by the shell (command processor) or the program that caused your program to run. See also the Sys.Nargs and Sys.FetchArg functions', 'Sys.GetEnv ( symbol : string ) : string', '(Function)', ['symbol'], ['Setting to get'], 'Resulting setting'),
				helpSignature('The Sys.GetPid function is used to determine the I.D. (number) that identifies the current operating system task (process). Beware that there are processes, activated by the fork statement, that are independent of the operating systems tasks', 'Sys.GetPid : int', '(Function)', [], [], 'Pid of program'),
				helpSignature('The Sys.GetUserName function is used to determine the name of the current user. It returns “Unknown” if a name could not be determined', 'Sys.GetUserName : string', '(Function)', [], [], 'Username of computer'),
				helpSignature('The Sys.Exec function is used to execute an application or more often, open a data file with its associated application. Sys.Exec can be used to launch such programs as the Internet Browser by specifying a URL. Sys.Exec launches the application associated with file\'s suffix. (In essence, it performs the same operation as if a user double clicked on the file.)', 'Sys.Exec ( command : string ) : boolean', '(Function)', ['command'], ['System command to be run'], 'If the command executed properly'),
				helpSignature('The Sys.FetchArg function is used to access the i-th argument that has been passed to a program from the command line', 'System.FetchArg ( i : int ) : string', '(Function)', ['i'], ['Which argument to access'], 'Output string of argument'),
				helpSignature('The Text.Cls (clear screen) procedure is used to blank the screen to the text background color. The cursor is set to the top left (to row 1, column 1)', 'Text.Cls'),
				helpSignature('The Text.ColourBack procedure is used to change the current text background colour', 'Text.ColorBack ( Colour : int )', '(Procedure)', ['Colour'], ['Colour to set the background colour to']),
				helpSignature('The Text.Colour procedure is used to change the currently-active colour. This is the colour of characters that are to be put on the screen', 'Text.Colour ( Colour : int )', '(Procedure)', ['Colour'], ['Colour to set the text to']),
				helpSignature('The Text.LocateXY procedure is used to move the cursor so that the next output from put will be at approximately (x, y). The exact location may be somewhat to the left of x and below y to force alignment to a character boundary', 'Text.LocateXY ( x , y : int )', '(Procedure)', ['x', 'y'], ['X position to set curser to', 'Y position to set curser to']),
				helpSignature('The Text.Locate procedure is used to move the cursor so that the next output from put will be at the given row and column. Row 1 is the top of the screen and column 1 is the left side of the screen', 'Text.Locate ( row, column : int )', '(Procedure)', ['row', 'column'], ['Row to set curser to', 'Column to set curser to']),
				helpSignature('The Time.SecDate function is used to convert the number of seconds since 00:00:00 GMT Jan 1, 1970 into a date and time string', 'Time.SecDate (timeInSecs : int) : string', '(Function)', ['timeInSecs'], ['Input time in seconds'], 'Output date as type string'),
				helpSignature('The Time.DateSec function is used to convert a date and time string into a number, specifically, the number of seconds since 00:00:00 GMT Jan 1, 1970', 'Time.DateSec (dateString : string) : int', '(Function)', ['dateString'], ['Input date as string "dd mmm yy"'], 'Output time as seconds since Jan 1, 1970'),
				helpSignature('The Time.SecParts function is used to convert a single number form of the time (the number of seconds since 00:00:00 GMT Jan 1, 1970) into a date with numeric component parts', ' 	Time.SecParts (sec : int, var year, month, day, dayOfWeek, hour, minute, second : int)', '(Procedure)', ['sec', 'year', 'month', 'day', 'dayOfWeek', 'hour', 'minute', 'second'], ['Seconds since Jan 1, 1970', 'Variable output year', 'Variable output month', 'Variable output day', 'Variable output dayOfWeek', 'Variable otuput hour', 'Variable output minute', 'Variable output second']),
				helpSignature('The Time.PartsSec function is used to convert the numeric parts of a date (specifically the year, month, day, hour, minute and second) into the number of seconds since 00:00:00 GMT Jan 1, 1970 and the date specified by the parts', 'Time.PartsSec (year, month, day, hour, minute, second : int) : int', '(Function)', ['year', 'month', 'day', 'hour', 'minute', 'second'], ['Input year', 'Input month', 'Input day', 'Input hour', 'Input minute', 'Input second'], 'Output time as seconds since Jan 1, 1970'),
				helpSignature('The Time.SecStr function is used to convert the number of seconds since 00:00:00 GMT Jan 1, 1970 into a date and time string', 'Time.SecStr (timeInSecs : int, formatString : string) : string', '(Function)', ['timeInSecs', 'formatString'], ['Seconds since Jan 1, 1970', 'Time [Format string](http://compsci.ca/holtsoft/doc/time_secstr.html)'], 'Formatted date string'),
				helpSignature('The Time.Delay procedure is used to cause the program to pause for a given time. The time duration is in milliseconds', 'Time.Delay ( duration : int )', '(Procedure)', ['duration'], ['Time to wait (ms)']),
				helpSignature('The Time.DelaySinceLast procedure is used to cause the program to pause for a given time since the last call to Time.DelaySinceLast. The time duration is in milliseconds', 'Time.DelaySinceLast ( duration : int )', '(Procedure)', ['duration'], ['Wait until `Duration` has passed since the start of execution']),
				helpSignature('The View.Set statement is used to change the mode of the screen, as well as the way in which Turing does input and output. The parameter to View.Set is a string, such as "graphics". The string contains one or more options separated by commas, such as "text, noecho". View.Set affects the active window', 'View.Set ( s : string )', '(Procedure)', ['s'], ['Mode to set view to']),
				helpSignature('The View.ClipSet procedure sets the clipping region to the rectangle specified by (x1, y1) - (x2, y2). If a clipping region already exist, it is replaced by the specified rectangle', 'View.ClipSet (x1, y1, x2, y2 : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2'], ['Corner 1 X position', 'Corner 1 Y position', 'Corner 2 X position', 'Corner 2 Y position']),
				helpSignature('The View.ClipAdd procedure adds another rectangle specified by (x1, y1) - (x2, y2) to the clipping region. This only works on systems that support complex clipping regions. If no clipping region has been specified, then the rectangle becomes the complete clipping region', 'View.ClipAdd (x1, y1, x2, y2 : int)', '(Procedure)', ['x1', 'y1', 'x2', 'y2'], ['Corner 1 X position', 'Corner 1 Y position', 'Corner 2 X position', 'Corner 2 Y position']),
				helpSignature('The View.ClipAddOval procedure adds another oval specified by (x, y) and xradius and yradius) to the clipping region. If no clipping region has been specified, then the oval becomes the complete clipping region', ' 	View.ClipAddOval (x, y, xradius, yradius : int)', '(Procedure)', ['x', 'y', 'xradius', 'yradius'], ['Center X position', 'Center Y position', 'Radius along X axis', 'Radius along Y axis']),
				helpSignature('The View.ClipOff procedure turns off clipping. This means that any drawing commands can appear on the entire drawing surface (the screen or the window, depending on the system)', 'View.ClipOff', '(Procedure)'),
				helpSignature('The View.WhatDotColour function is used to determine the colour number of the specified pixel', 'View.WhatDotColour ( x, y : int ) : int', '(Function)', ['x', 'y'], ['X position', 'y Position'], 'Output colour id'),
				helpSignature('The View.Update procedure updates a Run window from an offscreen bitmap. It is used with the command View.Set ("offscreenonly") which prevents the Run window from being updated until the View.Update command is given', 'View.Update', '(Procedure)'),
				helpSignature('The View.UpdateArea procedure updates a rectanglular area Run window, specified by (x1, y1) - (x2, y2) from the offscreen bitmap. It is used with the command View.Set ("offscreenonly") which prevents the Run window from being updated until the View.UpdateArea or View.Update command is given', 'View.UpdateArea (x1, y1, x2, y2)', '(Procedure)', ['x1', 'y1', 'x2', 'y2'], ['Corner 1 X position', 'Corner 1 Y position', 'Corner 2 X position', 'Corner 2 Y position']),
				helpSignature('The Window.Open function is used to create a window. A window ID is returned if the window is successfully created. If the window is not created then it returns 0. Error.Last and Error.LastMsg can then be used to determine the cause of the failure', 'Window.Open (setUpString : string) : int', '(Function)', ['setUpString'], ['Properties of newly created window'], 'Window id'),
				helpSignature('The Window.Close procedure closes the window specified by the windowID parameter', 'Window.Close (windowID : int)', '(Procedure)', ['windowID'], ['Window identifier to close']),
				helpSignature('The Window.Select selects the window that output is to be sent to', 'Window.Select (windowID : int)', '(Procedure)', ['windowID'], ['Window identifier to select']),
				helpSignature('The Window.GetSelect function returns the window ID of the selected window. If the select window is the main (default) run window, then it returns defWinID (which is -1)', 'Window.GetSelect : int', '(Function)', [], [], 'Identifier of currently selected window'),
				helpSignature('The Window.SetActive procedure activates the window specified by the windowID parameter', 'Window.SetActive (windowID : int)', '(Procedure)', ['windowID'], ['Identifier of window to set as active']),
				helpSignature('The Window.GetActive function returns the window ID of the active window. If the active window is a Turing run window, then Window.GetActive returns defWinID (which is -1) if the window is the default run window, or whatever number was returned from Window.Open for any other run window', 'Window.GetActive : int', '(Function)', [], [], 'Identifier of currently active window'),
				helpSignature('The Window.GetPosition procedure returns the location of the specified execution window on the screen in the x and y parameters. The x and y parameters specify the lower left corner of the window in screen coordinates. (0, 0) is the lower left corner of the screen', 'Window.GetPosition (windowID : int, var x, y : int)', '(Procedure)', ['windowID', 'x', 'y'], ['Identifier of window', 'Variable set to X position', 'Variable set to Y position']),
				helpSignature('The Window.SetPosition procedure moves the location of the specified execution window on the screen. x and y specify the lower left corner of the window in screen coordinates. (0, 0) is the lower left corner of the screen', 'Window.SetPosition (windowID : int, x, y : int)', '(Procedure)', ['windowID', 'x', 'y'], ['Identifier of window to move', 'New X position of window', 'New Y position of window']),
				helpSignature('The Window.Hide procedure hides the specified window. This means it disappears from the user\'s screen. However, it is still possible to select and draw the window while it remains hidden. If the user activates it (using Window.GetActive) it will automatically appear', 'Window.Hide (windowID : int)', '(Procedure)', ['windowID'], ['Identifier of window to hide']),
				helpSignature('The Window.Show procedure makes the specified window appear if it was invisible', 'Window.Show (windowID : int)', '(Procedure)', ['windowID'], ['Identifier of window to show']),
				helpSignature('The Window.Set procedure sets the configuration of the window specified by the windowID parameter. See View.Set for a complete list of available options. The setUpString parameter can be any combination options, separated by commas. Here is a selection of the available options', 'Window.Set (windowID : int, setUpString : string)', '(Procedure)', ['windowID', 'setUpString'], ['Identifier of window to reconfigure', 'Setup string to reconfigure window']),
				helpSignature('The Window.Update procedure updates a specified Run window from an offscreen bitmap. It is used with the command View.Set("offscreenonly") which prevents the Run window from being updated until the Window.Update command is given', 'Window.Update (windowID : int)', '(Procedure)', ['windowID'], ['Identifier of window to update']),
			);
			signature.signatures = [];
			signature.activeSignature = 0;
			signature.activeParameter = 0;
			sigStorage.forEach(sig => { // For each possible signature
				if(line.indexOf(sig.label.match(/\w+(\.\w+)?(?![^\s(])/)[0]) >= 0) { // If line starts with function name
					signature.signatures = [sig]; // Set signatures to signature
					if(sig.parameters.length > 1) { // Has more than one parameter to deal with
						let sub = line.substring(line.search(sig.label.substring(0, sig.label.search(/[\s(]/)))); // Line placeholder
						let charPos = pos.character - line.search(sig.label.substring(0, sig.label.search(/[\s(]/))); // Char pos placeholder
						let i; // Declare i for scope
						// Removes parameters until it gets to the one at pos
						for(i = 0; (charPos > sub.indexOf(',') && sub.includes(',')); i++) { // Uses like this are why I hate python for loops. Just add both!
							charPos -= sub.indexOf(','); // Adjust charPos to be accurate
							sub = sub.substring(sub.indexOf(',')+1); // Remove another param from the front
						}
						signature.activeParameter = i; // Set active parameter to the current one
					}
				}
			});
			return signature; // Return it
		}
	}, 
	'(', // Trigger on command and open parenthesis 
	','
);